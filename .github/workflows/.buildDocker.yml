on:
  workflow_call:
    inputs:
      arch:
        type: string
        required: false
        default: linux/amd64
        description: Image arch to build and run
      buildContext:
        type: string
        required: false
        default: src
      buildArgs:
        type: string
        required: false
        default: ''
      imageFolder:
        type: string
        required: false
        description: Folder to save the build to
        default: /tmp/dockerTest/${{ github.run_id }}_${{ inputs.id }}
      imageFile:
        type: string
        required: false
        description: File basename of image to save the build to
        default: image.tar
      imageArtifact:
        type: string
        required: false
        description: Name of the image artifact to save the build to
        default: ${{ github.run_id }}_${{ inputs.id }}
      cacheTo:
        type: string
        required: false
        description: Cache key to save the build to
        default: type=gha,scope=${{ inputs.cacheKey }},mode=max
      cacheFrom:
        type: string
        required: false
        description: Cache key to load the build from
        default: type=gha,scope=${{ inputs.cacheKey }}
      cacheKey:
        type: string
        required: false
        description: Cache key to seperate unrelated caches
        default: '${{ github.repository }}|${{ github.workflow }}|${{ github.ref_name }}|${{ inputs.id }}'
      jobName:
        type: string
        required: false
        description: Name of the job to run
        default: ${{ github.workflow }}${{ inputs.id != 'default' && format(' ({0})', inputs.id)}}
      id:
        type: string
        required: false
        description: ID of the image
        default: default
    outputs:
      imagePath:
        value: ${{ jobs.build.outputs.imagePath }}
      imageArtifact:
        value: ${{ jobs.build.outputs.imageArtifact }}
      meta:
        value: ${{ jobs.build.outputs.meta }}
      cacheTo:
        value: ${{ jobs.build.outputs.cacheTo }}
      cacheFrom:
        value: ${{ jobs.build.outputs.cacheFrom }}
      cacheKey:
        value: ${{ jobs.build.outputs.cacheKey }}
      id:
        value: ${{ jobs.build.outputs.id }}
jobs:
  build:
    name: ${{ inputs.jobName }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      imagePath: ${{ steps.getOutputs.outputs.imagePath }}
      imageArtifact: ${{ steps.getOutputs.outputs.imageArtifact }}
      meta: ${{ steps.getOutputs.outputs.meta }}
      cacheTo: ${{ steps.getOutputs.outputs.cacheTo }}
      cacheFrom: ${{ steps.getOutputs.outputs.cacheFrom }}
      cacheKey: ${{ steps.getOutputs.outputs.cacheKey }}
      id: ${{ steps.getOutputs.outputs.id }}
    steps:
      - name: checkout
        uses: actions/checkout@v3.5.2
      - name: setupNode
        uses: actions/setup-node@v3.6.0
        with:
          node-version: current
      - name: installNodePackages
        shell: bash
        run: |
          cd ..
          npm install --no-package-lock --no-save @actions/core read-file-string execa vm2 fs-extra
      - name: setupQemu
        if: ${{ inputs.arch != 'linux/amd64' }}
        uses: docker/setup-qemu-action@v2.1.0
        with:
          platforms: ${{ inputs.arch }}
      - name: setupBuildx
        uses: docker/setup-buildx-action@v2.5.0
      - name: ensureImageFolder
        run: mkdir --parents ${{ inputs.imageFolder }}
      - id: getImagePath
        shell: sh -c "node --input-type module < {0}"
        env:
          inputs: ${{ toJSON(inputs) }}
        run: |
          import core from '@actions/core'
          import path from 'path'
          const inputs = JSON.parse(process.env.inputs)
          const setOutput = (value, name = 'value') => {
            core.setOutput(name, value)
            console.dir('Output', {name, value})
          }
          const imagePath = path.resolve(inputs.imageFolder, inputs.imageFile)
          setOutput(imagePath)
      - name: buildImage
        id: buildImage
        uses: docker/build-push-action@v4.0.0
        with:
          context: ${{ inputs.buildContext }}
          platforms: ${{ inputs.arch }}
          build-args: ${{ inputs.buildArgs }}
          outputs: type=docker,dest=${{ steps.getImagePath.outputs.value }}
          cache-to: ${{ inputs.cacheTo }}
          cache-from: ${{ inputs.cacheFrom }}
          tags: test
      - name: saveArtifact
        if: ${{ inputs.imageArtifact }}
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ inputs.imageArtifact }}
          path: ${{ inputs.imageFolder }}
      - id: checkArtifact
        shell: bash
        env:
          imageFolder: ${{ inputs.imageFolder }}
        run: |
          ls -l --almost-all --block-size 1 "$imageFolder"
      - id: getOutputs
        shell: sh -c "node --input-type module < {0}"
        env:
          inputs: ${{ toJSON(inputs) }}
          steps: ${{ toJSON(steps) }}
        run: |
          import core from '@actions/core'
          const inputs = JSON.parse(process.env.inputs)
          const steps = JSON.parse(process.env.steps)
          const setOutput = (value, name = 'value') => {
            core.setOutput(name, value)
            core.info(`Output ${name}: ${value}`)
          }
          setOutput(steps.getImagePath.outputs.value, 'imagePath')
          setOutput(inputs.imageArtifact, 'imageArtifact')
          setOutput(steps.buildImage.outputs.metadata, 'meta')
          setOutput(inputs.cacheFrom, 'cacheFrom')
          setOutput(inputs.cacheTo, 'cacheTo')
          setOutput(inputs.cacheKey, 'cacheKey')
          setOutput(inputs.id, 'id')