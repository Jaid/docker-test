name: executePushDocker
on:
  workflow_call:
    inputs:
      passedInputs:
        type: string
        required: true
        description: JSON object containing all parent inputs
      matrixEntry:
        type: string
        required: true
        description: JSON object containing all matrix values
      nameSuffix:
        type: string
        required: false
        description: Suffix for job naming (just a visual thing)
      imageName:
        type: string
        required: true
        description: Name of the Docker image
      imageUser:
        type: string
        required: true
        description: Docker Hub user or organization
      imageSlug:
        type: string
        required: false
        description: Slug of the Docker image
    secrets:
      dockerHubToken:
        required: false
        description: 'Create here with “Read, Write”: https://hub.docker.com/settings/security?generateToken=true'
    outputs:
      meta:
        value: ${{ jobs.push.outputs.meta }}
      digest:
        value: ${{ jobs.push.outputs.digest }}
      imageId:
        value: ${{ jobs.push.outputs.imageId }}
      imageName:
        value: ${{ jobs.push.outputs.imageName }}
      imageSlug:
        value: ${{ jobs.push.outputs.imageSlug }}
      imageUser:
        value: ${{ jobs.push.outputs.imageUser }}
run-name: invoke${{ inputs.nameSuffix }}
jobs:
  getInputs:
    name: getInputs${{ inputs.nameSuffix }}
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.getInputs.outputs.value }}
    steps:
      - name: setupNode
        uses: actions/setup-node@v3.7.0
        with:
          node-version: latest
      - name: installNodePackages
        shell: bash
        run: npm install --no-save --no-package-lock @actions/core lodash-es sort-keys
      - id: getInputs
        name: getInputs
        shell: sh -c "node --input-type module < {0}"
        env:
          inputs: ${{ toJson(inputs) }}
          github: ${{ toJSON(github) }}
        run: |
          import core from '@actions/core'
          import sortKeys from 'sort-keys'
          import {camelCase, omit} from 'lodash-es'
          const inputs = JSON.parse(process.env.inputs)
          const passedInputs = JSON.parse(inputs.passedInputs)
          const matrixEntry = JSON.parse(inputs.matrixEntry)
          const github = JSON.parse(process.env.github)
          const setOutput = (value, name = 'value') => {
            core.setOutput(name, value)
            core.info(`Output ${name}: ${value}`)
          }
          console.dir(omit(inputs, ['passedInputs', 'matrixEntry']))
          const outputs = {
            ...omit(inputs, ['passedInputs', 'matrixEntry']),
            ...passedInputs
          }
          for (const [key, value] of Object.entries(matrixEntry)) {
            const exclusiveKey = camelCase(`matrix ${key}`)
            outputs[exclusiveKey] = value
          }
          if (!outputs.imageSlug) {
            outputs.imageSlug = `${outputs.imageUser}/${outputs.imageName}`
          }
          if (!outputs.imageArtifact) {
            outputs.imageArtifact = `${github.run_id}_${outputs.matrixId}`
          }
          if (!outputs.imageFolder) {
            outputs.imageFolder = `/tmp/dockerBuild/${github.run_id}_${outputs.matrixId}`
          }
          for (const [key, value] of Object.entries(sortKeys(outputs))) {
            setOutput(value, key)
          }
          setOutput(JSON.stringify(outputs))
  build:
    name: build${{ inputs.nameSuffix }}
    needs: getInputs
    uses: ./.github/workflows/buildDocker.overlay.yml
    with:
      id: ${{ fromJson(needs.getInputs.outputs.value).matrixId }}
      arch: ${{ fromJson(needs.getInputs.outputs.value).matrixPlatform }}
      buildContext: ${{ fromJson(needs.getInputs.outputs.value).buildContext }}
      buildArgs: ${{ fromJson(needs.getInputs.outputs.value).matrixBuildArgs }}
      imageName: ${{ fromJson(needs.getInputs.outputs.value).imageName }}
  # test:
  #   if: ${{ needs.getInputs.outputs.value.matrixIsNativeArch }}
  #   name: test${{ inputs.nameSuffix }}
  #   needs:
  #     - getInputs
  #     - build
  #   uses: ./.github/workflows/testDocker.overlay.yml
  #   with:
  #     id: ${{ needs.getInputs.outputs.value.matrixId }}
  #     dockerRunArgs: ${{ needs.getInputs.outputs.value.testDockerRunArgs }}
  #     appArgs: ${{ needs.getInputs.outputs.value.testAppArgs }}
  #     testEval: ${{ needs.getInputs.outputs.value.testEval }}
  # push:
  #   name: push${{ matrix.id && format(' ({0})', matrix.id) }}
  #   needs:
  #     - getDockerImageName
  #     - makeMatrix
  #     - test
  #     - build
  #   permissions:
  #     packages: write
  #   strategy:
  #     matrix:
  #       include: ${{ fromJson(needs.makeMatrix.outputs.output) }}
  #   uses: ./.github/workflows/uploadDocker.overlay.yml
  #   with:
  #     id: ${{ matrix.id }}
  #     dockerHubUser: ${{ inputs.dockerHubUser }}
  #     dockerHubRegistry: ${{ inputs.dockerHubRegistry }}
  #     githubRegistry: ${{ inputs.githubRegistry }}
  #     baseTags: ${{ inputs.baseTags }}
  #     addShaTags: ${{ inputs.addShaTags }}
  #     addScheduleTags: ${{ inputs.addScheduleTags }}
  #     addVersionTag: ${{ inputs.addVersionTag }}
  #     versionTagPrefix: ${{ inputs.versionTagPrefix }}
  #     additionalTags: ${{ inputs.additionalTags }}
  #     versionTag: ${{ inputs.versionTag }}
  #     versionTagSemverPrefix: ${{ inputs.versionTagSemverPrefix }}
  #     flavorLatest: ${{ inputs.flavorLatest }}
  #     flavorPrefix: ${{ inputs.flavorPrefix }}
  #     flavorSuffix: ${{ inputs.flavorSuffix }}
  #     flavorConnectionString: ${{ inputs.flavorConnectionString }}
