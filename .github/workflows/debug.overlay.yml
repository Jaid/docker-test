name: debug
on:
  workflow_call: {}
jobs:
  job:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: prepare
        id: prepare
        shell: bash
        run: |
          printf 'homeFolder=%s\n' "$(realpath ~)" >> $GITHUB_OUTPUT
          printf 'cwdFolder=%s\n' "$(realpath .)" >> $GITHUB_OUTPUT
          printf 'cwdParentFolder=%s\n' "$(realpath ..)" >> $GITHUB_OUTPUT
          printf 'workspaceFolder=%s\n' "$(realpath "$GITHUB_WORKSPACE")" >> $GITHUB_OUTPUT
          printf 'tempFolder=%s\n' "$(realpath "$RUNNER_TEMP")" >> $GITHUB_OUTPUT
      - name: checkout
        uses: actions/checkout@v3.5.2
      - name: installPackages
        uses: awalsh128/cache-apt-pkgs-action@v1.3.0
        with:
          packages: jq
      - name: users
        shell: bash
        run: |
          cat /etc/passwd
      - name: groups
        shell: bash
        run: |
          cat /etc/group
      - name: dumpEnv
        shell: bash
        env:
          object: ${{ toJson(env) }}
        run: |
          jq --indent 2 --color-output . <<< "$object"
      - name: dumpVars
        shell: bash
        env:
          object: ${{ toJson(vars) }}
        run: |
          jq --indent 2 --color-output . <<< "$object"
      - name: dumpGithub
        shell: bash
        env:
          object: ${{ toJson(github) }}
        run: |
          jq --indent 2 --color-output . <<< "$object"
      - name: dumpJob
        shell: bash
        env:
          object: ${{ toJson(job) }}
        run: |
          jq --indent 2 --color-output . <<< "$object"
      - name: dumpSteps
        shell: bash
        env:
          object: ${{ toJson(steps) }}
        run: |
          jq --indent 2 --color-output . <<< "$object"
      - name: dumpRunner
        shell: bash
        env:
          object: ${{ toJson(runner) }}
        run: |
          jq --indent 2 --color-output . <<< "$object"
      - name: osRelease
        shell: bash
        run: |
          styleBlue=$(TERM=xterm-256color tput setaf 6)
          styleOrange=$(TERM=xterm-256color tput setaf 172)
          styleReset=$(TERM=xterm-256color tput sgr0)
          osRelease=$(cat /etc/os-release)
          keys=($(printf %s "$osRelease" | cut --fields 1 --delimiter = | sort))
          for key in "${keys[@]}"; do
            # declare version=$(dpkg --status "$key" | grep --extended-regexp "^Version:" | cut --fields 2- --delimiter ' ')
            declare value=$(printf %s "$osRelease" | grep --extended-regexp "^$key=" | cut --fields 2- --delimiter =)
            if [[ ${value:0:1} == '"' ]]; then
              value=${value:1:-1}
            fi
            printf "$styleOrange%s$styleReset: $styleBlue%s$styleReset\n" "$key" "$value"
          done
      - name: env
        shell: bash
        run: |
          styleBlue=$(TERM=xterm-256color tput setaf 6)
          styleOrange=$(TERM=xterm-256color tput setaf 172)
          styleReset=$(TERM=xterm-256color tput sgr0)
          keys=($(printenv | cut -d'=' -f1))
          sortedKeys=($(printf '%s\n' "${keys[@]}" | tr ' ' '\n' | sort -df))
          for key in "${sortedKeys[@]}"; do
            declare value=$(printenv "$key")
            printf "$styleOrange%s$styleReset: $styleBlue%s$styleReset\n" "$key" "$value"
          done
      - name: ubuntuPackages
        shell: bash
        run: |
          styleBlue=$(TERM=xterm-256color tput setaf 6)
          styleOrange=$(TERM=xterm-256color tput setaf 172)
          styleReset=$(TERM=xterm-256color tput sgr0)
          keys=($(dpkg --get-selections | grep --invert-match deinstall | cut --fields 1))
          for key in "${keys[@]}"; do
            declare version=$(dpkg --status "$key" | grep --extended-regexp "^Version:" | cut --fields 2- --delimiter ' ')
            printf "$styleOrange%s$styleReset: $styleBlue%s$styleReset\n" "$key" "$version"
          done
      - name: pythonPackages
        shell: bash
        run: |
          styleBlue=$(TERM=xterm-256color tput setaf 6)
          styleOrange=$(TERM=xterm-256color tput setaf 172)
          styleReset=$(TERM=xterm-256color tput sgr0)
          while read -r line; do
            package=$(printf %s "$line" | cut --delimiter ' ' --fields 1)
            version=$(printf %s "$line" | cut --delimiter ' ' --fields 2-)
            printf "$styleOrange%s$styleReset: $styleBlue%s$styleReset\n" "$package" "$version"
          done < <(pip list | sed '1,2d')
      - name: nodePackages
        shell: bash
        run: |
          styleBlue=$(TERM=xterm-256color tput setaf 6)
          styleOrange=$(TERM=xterm-256color tput setaf 172)
          styleReset=$(TERM=xterm-256color tput sgr0)
          while read -r line; do
          package=$(printf %s "$line" | cut --delimiter ' ' --fields 1)
          version=$(printf %s "$line" | cut --delimiter ' ' --fields 2-)
              printf "$styleOrange%s$styleReset: $styleBlue%s$styleReset\n" "$package" "$version"
          done < <(npm list --depth 0 --global --json | jq --raw-output '.dependencies | to_entries[] | "\(.key) \(.value.version)"')
      - name: commands
        shell: bash
        run: |
          styleBlue=$(TERM=xterm-256color tput setaf 6)
          styleOrange=$(TERM=xterm-256color tput setaf 172)
          styleReset=$(TERM=xterm-256color tput sgr0)
          IFS=: read -ra paths <<< "$PATH"
          declare -a foundCommands
          for folder in "${paths[@]}"; do
            if [[ -d $folder ]]; then
              files=()
              while read -r -d $'\0' file; do
                files+=("$file")
              done < <(find "$folder" -maxdepth 1 -type f -executable -printf '%P\0')
              sortedFiles=($(printf '%s\n' "${files[@]}" | sort -d))
              if [[ ${#files[@]} -ge 1 ]]; then
                printf "$styleOrange%s$styleReset (%s)\n" "$folder" "${#files[@]}"
                for file in "${sortedFiles[@]}"; do
                  if [[ ! " ${foundCommands[*]} " =~ " ${file} " ]]; then
                    printf "$styleBlue%s$styleReset\n" "$file"
                    foundCommands+=("$file")
                  fi
                done
              fi
            fi
          done
      - id: lsHome
        if: ${{ steps.prepare.outcome == 'success' && steps.prepare.outputs.homeFolder != '' }}
        name: ls ${{ steps.prepare.outputs.homeFolder }}
        shell: bash
        env:
          target: ${{ steps.prepare.outputs.homeFolder }}
        run: |
          set -o xtrace
          ls -l --almost-all --color=always --si --literal --group-directories-first "$target"
      - id: lsCwd
        if: ${{ steps.prepare.outcome == 'success' && steps.prepare.outputs.cwdFolder != '' }}
        name: ls ${{ steps.prepare.outputs.cwdFolder }}
        shell: bash
        env:
          target: ${{ steps.prepare.outputs.cwdFolder }}
        run: |
          set -o xtrace
          ls -l --almost-all --color=always --si --literal --group-directories-first "$target"
      - id: lsCwdParent
        if: ${{ steps.prepare.outcome == 'success' && steps.prepare.outputs.cwdParentFolder != '' }}
        name: ls ${{ steps.prepare.outputs.cwdParentFolder }}
        shell: bash
        env:
          target: ${{ steps.prepare.outputs.cwdParentFolder }}
        run: |
          set -o xtrace
          ls -l --almost-all --color=always --si --literal --group-directories-first "$target"
      - id: lsWorkspace
        if: ${{ steps.prepare.outcome == 'success' && steps.prepare.outputs.workspaceFolder != '' }}
        name: ls ${{ steps.prepare.outputs.workspaceFolder }}
        shell: bash
        env:
          target: ${{ steps.prepare.outputs.workspaceFolder }}
        run: |
          set -o xtrace
          ls -l --almost-all --color=always --si --literal --group-directories-first "$target"
      - id: lsTemp
        if: ${{ steps.prepare.outcome == 'success' && steps.prepare.outputs.tempFolder != '' }}
        name: ls ${{ steps.prepare.outputs.tempFolder }}
        shell: bash
        env:
          target: ${{ steps.prepare.outputs.tempFolder }}
        run: |
          set -o xtrace
          ls -l --almost-all --color=always --si --literal --group-directories-first "$target"
