on:
  workflow_call:
    inputs:
      dockerRunArgs:
        type: string
        required: false
        default: ''
      appArgs:
        type: string
        required: false
        default: ''
      testEval:
        type: string
        required: false
        description: 'JavaScript expression to validate the output (included globals: result, inputs)'
        default: status === 0
      imageFolder:
        type: string
        required: false
        description: Folder to save the build to
      imageFile:
        type: string
        required: false
        description: File basename of image to save the build to
        default: image.tar
      imageArtifact:
        type: string
        required: false
        description: Name of the image artifact to save the build to
      id:
        type: string
        required: false
        description: ID of the image
jobs:
  test:
    name: ${{ github.job.name }}${{ inputs.id != 'default' && format(' ({0})', inputs.id) || '' }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3.5.3
      - name: setupNode
        uses: actions/setup-node@v3.7.0
        with:
          node-version: latest
      - name: installNodePackages
        shell: bash
        run: |
          cd
          npm install --no-save --no-package-lock @actions/core read-file-string execa vm2 fs-extra
      - id: getInputs
        shell: sh -c "node --input-type module < {0}"
        env:
          inputs: ${{ toJSON(inputs) }}
          github: ${{ toJSON(github) }}
        run: |
          import core from '@actions/core'
          const inputs = JSON.parse(process.env.inputs)
          const github = JSON.parse(process.env.github)
          const setOutput = (value, name = 'value') => {
            core.setOutput(name, value)
            core.info(`Output ${name}: ${value}`)
          }
          const outputs = {
            ...inputs
          }
          if (!outputs.id) {
            outputs.id = 'default'
          }
          if (!outputs.imageArtifact) {
            outputs.imageArtifact = `${github.run_id}_${outputs.id}`
          }
          if (!outputs.imageFolder) {
            outputs.imageFolder = `/tmp/dockerBuild/${github.run_id}_${outputs.id}`
          }
          for (const [key, value] of Object.entries(outputs)) {
            setOutput(value, key)
          }
          setOutput(JSON.stringify(outputs))
      - name: loadArtifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ steps.getInputs.outputs.imageArtifact }}
          path: ${{ steps.getInputs.outputs.imageFolder }}
      - name: loadImage
        shell: bash
        env:
          imageFolder: ${{ steps.getInputs.outputs.imageFolder }}
          imageFile: ${{ steps.getInputs.outputs.imageFile }}
        run: |
            docker load --input "$imageFolder/$imageFile"
      - id: runImage
        shell: sh -c "node --input-type module < {0}"
        env:
          inputs: ${{ steps.getInputs.outputs.value }}
        run: |
          import core from '@actions/core'
          import { execa } from 'execa'
          import { VM } from 'vm2'
          import fs from 'fs-extra'
          import path from 'path'
          const inputs = JSON.parse(process.env.inputs)
          const args = ['run', '--rm']
          if (inputs.dockerRunArgs) {
            args.push(...inputs.dockerRunArgs.split(' '))
          }
          args.push('test')
          if (inputs.appArgs) {
            args.push(...inputs.appArgs.split(' '))
          }
          const executionResult = await execa('docker', args, {all: true, verbose: true})
          const sandboxGlobals = {
            stdout: executionResult.stdout,
            stderr: executionResult.stderr,
            status: executionResult.exitCode,
            fs,
            executionResult,
            inputs
          }
          console.dir(sandboxGlobals)
          if (inputs.testEval) {
            console.log(`Running validation expression: ${inputs.testEval}`)
            const vm = new VM({
              sandbox: sandboxGlobals
            })
            const validation = vm.run(inputs.testEval)
            console.log(`Validation expression returned: ${validation}`)
            if (!validation) {
              throw new Error('Validation expression returned ' + validation)
            }
          }